# CodeMagic CI/CD Configuration
# VR Avatar App - Flutter + Unity as Library
# GPU最適化・Neural Engine対応iOS専用アプリ

workflows:
  ios-workflow:
    name: iOS VR Avatar App
    max_build_duration: 120
    instance_type: mac_mini_m1
    # integrations:
    #   app_store_connect: codemagic
    environment:
      # ios_signing:
      #   distribution_type: development
      #   bundle_identifier: com.vr.avatar1
      vars:
        XCODE_WORKSPACE: "ios/Runner.xcworkspace"
        XCODE_SCHEME: "Runner"
        BUNDLE_ID: "com.example.vr_avatar_app"
      flutter: stable
      xcode: latest
      cocoapods: default
    scripts:
      # - name: Set up provisioning profiles
      #   script: |
      #     # CodeMagic自動プロビジョニング
      #     xcode-project use-profiles
      
      - name: Get Flutter packages
        script: |
          flutter packages pub get
      
      - name: Install CocoaPods dependencies
        script: |
          cd ios
          pod install --repo-update
      
      - name: Unity Framework Headers Validation
        script: |
          # Unity Framework headers確認・復元スクリプト
          cd ios
          
          # Headers ディレクトリの確認
          HEADERS_DIR="Frameworks/UnityFramework.framework/Headers"
          
          if [ ! -d "$HEADERS_DIR" ]; then
            echo "🔧 Creating Headers directory..."
            mkdir -p "$HEADERS_DIR"
          fi
          
          # 必須ヘッダーファイルの存在確認
          REQUIRED_HEADERS=("UnityFramework.h" "UnityAppController.h" "RenderPluginDelegate.h" "LifeCycleListener.h")
          
          for header in "${REQUIRED_HEADERS[@]}"; do
            if [ ! -f "$HEADERS_DIR/$header" ]; then
              echo "⚠️  Missing header: $header"
              echo "🔧 Restoring from Git repository..."
              
              # Git から復元を試行
              if git show HEAD:"ios/Frameworks/UnityFramework.framework/Headers/$header" > "$HEADERS_DIR/$header" 2>/dev/null; then
                echo "✅ Restored $header from Git"
              else
                echo "❌ Failed to restore $header from Git"
                exit 1
              fi
            else
              echo "✅ $header exists"
            fi
          done
          
          echo "🎯 All Unity Framework headers validated successfully!"
          cd ..
      
      - name: Unity as Library自動展開
        script: |
          # Unity as Library ZIP展開スクリプト
          cd ios
          
          # 1. UnityFramework.framework 展開
          if [ -f "UnityFramework.zip" ]; then
            echo "📦 Extracting UnityFramework.zip..."
            unzip -o UnityFramework.zip -d ./
            echo "✅ UnityFramework.framework extracted successfully"
            echo "Size: $(du -sh Frameworks/UnityFramework.framework 2>/dev/null || echo 'Framework not found')"
          else
            echo "❌ UnityFramework.zip not found!"
            exit 1
          fi
          
          # 2. UnityLibraries 展開
          if [ -f "UnityLibraries.zip" ]; then
            echo "📦 Extracting UnityLibraries.zip..."
            unzip -o UnityLibraries.zip -d ./
            echo "✅ Unity Libraries extracted successfully"
            
            # Libraries 配置確認
            if [ -d "Libraries" ]; then
              echo "📂 Unity Libraries structure:"
              ls -la Libraries/
              echo "Total size: $(du -sh Libraries/)"
            fi
          else
            echo "❌ UnityLibraries.zip not found!"
            exit 1
          fi
          
          # 3. Unity Framework 完全性チェック
          FRAMEWORK_PATH="Frameworks/UnityFramework.framework"
          if [ -d "$FRAMEWORK_PATH" ]; then
            echo "🔍 Unity Framework validation..."
            
            # 実行バイナリ確認
            if [ -f "$FRAMEWORK_PATH/UnityFramework" ]; then
              echo "✅ UnityFramework binary exists"
              file "$FRAMEWORK_PATH/UnityFramework"
            else
              echo "❌ UnityFramework binary missing!"
              exit 1
            fi
            
            # Info.plist 確認
            if [ -f "$FRAMEWORK_PATH/Info.plist" ]; then
              echo "✅ Info.plist exists"
            else
              echo "❌ Info.plist missing!"
              exit 1
            fi
            
            # Headers 確認
            if [ -d "$FRAMEWORK_PATH/Headers" ]; then
              echo "✅ Headers directory exists"
              ls -la "$FRAMEWORK_PATH/Headers/"
            else
              echo "⚠️  Headers directory missing - creating..."
              mkdir -p "$FRAMEWORK_PATH/Headers"
            fi
            
            # Data 確認
            if [ -d "$FRAMEWORK_PATH/Data" ]; then
              echo "✅ Unity Data directory exists"
              echo "Data size: $(du -sh "$FRAMEWORK_PATH/Data")"
            else
              echo "❌ Unity Data directory missing!"
              exit 1
            fi
            
          else
            echo "❌ UnityFramework.framework not found after extraction!"
            exit 1
          fi
          
          echo "🎯 Unity as Library setup completed successfully!"
          echo "📊 Final structure:"
          ls -la Frameworks/
          cd ..
      
      - name: Build iOS app (No Code Signing)
        script: |
          # Unity as Library統合テスト用ビルド（署名なし）
          flutter build ios --release \
            --dart-define=GPU_OPTIMIZATION=true \
            --dart-define=NEURAL_ENGINE=true \
            --dart-define=METAL_API=true \
            --dart-define=TARGET_FPS=60 \
            --no-codesign
          
          echo "✅ Flutter build completed successfully!"
          echo "📦 Build artifacts:"
          ls -la build/ios/Release-iphoneos/
      
      # - name: Build .ipa with Xcode
      #   script: |
      #     xcode-project build-ipa \
      #       --workspace "$XCODE_WORKSPACE" \
      #       --scheme "$XCODE_SCHEME" \
      #       --archive-flags "-destination 'generic/platform=iOS'"
    
    artifacts:
      - build/ios/Release-iphoneos/*.app
      - /tmp/xcodebuild_logs/*.log
      - flutter_drive.log
    
    publishing:
      email:
        recipients:
          - nndds@example.com
        notify:
          success: true
          failure: true
      # app_store_connect:
      #   auth: integration
      #   submit_to_testflight: true
      #   submit_to_app_store: false

  debug-workflow:
    name: iOS Debug Build
    max_build_duration: 60
    instance_type: mac_mini_m1
    environment:
      flutter: stable
      xcode: latest
      cocoapods: default
    scripts:
      - name: Get Flutter packages
        script: |
          flutter packages pub get
      
      - name: Unity Framework 確認
        script: |
          ls -la ios/Frameworks/
          du -sh ios/Frameworks/UnityFramework.framework/
      
      - name: Build debug iOS
        script: |
          # デバッグビルド（開発用）
          flutter build ios --debug \
            --dart-define=GPU_OPTIMIZATION=false \
            --dart-define=DEBUG_MODE=true \
            --no-codesign
    
    artifacts:
      - build/ios/Debug-iphoneos/*.app